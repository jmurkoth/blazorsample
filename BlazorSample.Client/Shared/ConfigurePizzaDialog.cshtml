@inject HttpClient HttpClient
  
        @if (Pizza != null)
        {
            <div class="dialog-title">
                <h2>@Pizza.Special.Name</h2>
                @Pizza.Special.Description
            </div>
            <form class="dialog-body">
                <div>
                    <label>Size:</label>
                    <input type="range" min="@Pizza.MinimumSize"
                           max="@Pizza.MaximumSize"
                           step="1"
                           value="@Pizza.Size"
                           onchange="@((UIChangeEventArgs  e)=> Pizza.Size= int.Parse(e.Value.ToString()))" />

                    <span class="size-label">
                        @(Pizza.Size)" ($@(Pizza.GetFormattedTotalPrice()))
                    </span>
                </div>
                <div>
                    <label>Extra Toppings:</label>
                    @if (Toppings == null)
                    {
                        <select class="custom-select" disabled>
                            <option>(loading...)</option>
                        </select>
                    }
                    else if (Pizza.Toppings.Count >= 6)
                    {
                        <div>(maximum reached)</div>
                    }
                    else
                    {
                        <select class="custom-select" onchange="@ToppingsSelected">

                            <option value="-1" disabled selected>(select)</option>
                            @for (int i = 0; i < Toppings.Count; i++)
                            {
                                <option value="@i">@Toppings[i].Name - ($ @Toppings[i].GetFormattedPrice())</option>
                            }
                        </select>
                    }
                </div>
                <div>
                    @if (Pizza.Toppings != null)
                    {
                        @foreach (var pizzaTopping in Pizza.Toppings)
                        {
                            <div class="topping">
                                @pizzaTopping.Topping.Name
                                <span class="topping-price">@pizzaTopping.Topping.GetFormattedPrice()</span>
                                <button type="button" class="delete-topping" onclick="@(()=>RemoveTopping(pizzaTopping.Topping))">x</button>
                            </div>
                        }
                    }
                </div>
            </form>
            <div class="dialog-buttons">
                <button class="btn btn-secondary mr-auto" onclick="@OnCancel">Cancel</button>
                <span class="mr-center">
                    Price: <span class="price">@(Pizza.GetFormattedTotalPrice())</span>
                </span>
                <button class="btn btn-success ml-auto" onclick="@OnConfirm">Order ></button>
            </div>
        }

@functions {

    List<Topping> Toppings { get; set; }
    [Parameter]
    Pizza Pizza { get; set; }
    [Parameter]
    Action OnCancel { get; set; }
    [Parameter]
    Action OnConfirm { get; set; }
    protected async override Task OnInitAsync()
    {
        Toppings = await HttpClient.GetJsonAsync<List<Topping>>("/toppings");
    }

   
    void ToppingsSelected(UIChangeEventArgs e)
    {

        AddTopping(Toppings[int.Parse(e.Value.ToString())]);
    }
    void AddTopping(Topping topping)
    {
        if (Pizza != null && Pizza.Toppings != null && Pizza.Toppings.Find(pt => pt.Topping == topping) == null)
        {
            Pizza.Toppings.Add(new PizzaTopping { Topping = topping });

        }
    }
    void RemoveTopping(Topping topping)
    {
        if (Pizza != null && Pizza.Toppings != null )
        {
            Pizza.Toppings.RemoveAll(pt => pt.Topping == topping);

        }
    }

}

