@page "/"
@inject HttpClient HttpClient
@inject Microsoft.AspNetCore.Components.Services.IUriHelper UriHelper
@inject OrderState currentState
@implements IDisposable
@inject IJSRuntime JS
<div class="main">

    @if (specials != null)
    {
        <ul class="pizza-cards">
            @foreach (var special in specials)
            {
                <li style="background-image:url('@special.ImageUrl')" onclick="@(()=>currentState.ShowConfigurePizzaDialog(special))">
                    <div class="pizza-info">
                        <span class="title">@special.Name</span>
                        @special.Description
                        <span class="price">@special.GetFormattedBasePrice()</span>
                    </div>

                </li>
            }
        </ul>
    }
    @if (currentState.ShowconfigurationDialog)
    {
        <ConfigurePizzaDialog  Pizza="@currentState.ConfiguringPizza" OnCancel="@currentState.CancelConfigurePizzaDialog" OnConfirm="@currentState.OrderConfiguredPizza"></ConfigurePizzaDialog>
    }

</div>
<div class="sidebar">
    @if (currentState.PizzaOrder.Pizzas.Any())
    {
        <div class="order-contents">
            <h2>Your order</h2>

            @foreach (var configuredPizza in currentState.PizzaOrder.Pizzas)
            {
                <ConfiguredPizzaItem Pizza="configuredPizza" OnRemove="(()=> RemovePizza(configuredPizza))" />
            }
        </div>
    }
    else
    {
        <div class="empty-cart">Choose a pizza<br>to get started</div>
    }
    <div class="order-total @(currentState.PizzaOrder.Pizzas.Any() ? "" : "hidden")">
        Total:
        <span class="total-price">@currentState.PizzaOrder.GetFormattedTotalPrice()</span>
        <button class="btn btn-warning" disabled="@(currentState.PizzaOrder.Pizzas.Count == 0)" onclick="@PlaceOrder">
            Order >
        </button>
    </div>
</div>
@functions{

    List<PizzaSpecial> specials;


    protected async override Task OnInitAsync()
    {
        currentState.StateChanged += OnOrderStateChanged;
        specials = await HttpClient.GetJsonAsync<List<PizzaSpecial>>("/specials");
    }


    void OnOrderStateChanged(object sender, EventArgs e) => StateHasChanged();

    void IDisposable.Dispose()
    {
        currentState.StateChanged -= OnOrderStateChanged;
    }

    async Task RemovePizza(Pizza configuredPizza)
    {
        if(await JS.Confirm($"Remove {configuredPizza.Special.Name} pizza from the order?"))
        {
            Console.WriteLine("Removing pizza");
            currentState.RemovePizzaFromOrder(configuredPizza);
        }
    }
    async Task PlaceOrder()
    {
        await HttpClient.PostJsonAsync("/orders", currentState.PizzaOrder);
        currentState.ResetOrder();
        UriHelper.NavigateTo("myorders");
    }
}