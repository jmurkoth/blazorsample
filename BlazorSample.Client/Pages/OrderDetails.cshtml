@page "/myorders/{orderId:int}"
@inject HttpClient HttpClient
@implements IDisposable

@using System.Threading

<div class="main">
    @if (invalidOrder)
    {
        <h2>Nope</h2>
        <p>Sorry, this order could not be loaded.</p>
    }
    else if (orderWithStatus == null)
    {
        <text>Loading...</text>
    }
    else
    {
        <div class="track-order">
            <div class="track-order-title">
                <h2>
                    Order placed @orderWithStatus.Order.CreatedTime.ToLongDateString()
                </h2>
                <p class="ml-auto mb-0">
                    Status: <strong>@orderWithStatus.StatusText</strong>
                </p>
                <p class="ml-auto mb-0">
                    OrderId: <strong>@orderWithStatus.Order.OrderId</strong>
                </p>
            </div>
            <div class="track-order-body">
                <div class="track-order-details">
                    @foreach (var pizza in orderWithStatus.Order.Pizzas)
                    {
                        <p>
                            <strong>
                                @(pizza.Size)"
                                @pizza.Special.Name
                                ($@pizza.GetFormattedTotalPrice())
                            </strong>
                        </p>

                        <ul>
                            @foreach (var topping in pizza.Toppings)
                            {
                                <li>+ @topping.Topping.Name</li>
                            }
                        </ul>
                    }

                    <p>
                        <strong>
                            Total price:
                            $@orderWithStatus.Order.GetFormattedTotalPrice()
                        </strong>
                    </p>
                </div>
                <div class="track-order-map">
                    <Map Zoom="13" Markers="@orderWithStatus.MapMarkers" />
                </div>
            </div>
        </div>
    }
</div>

@functions{


    [Parameter]
    int OrderId { get; set; }
    bool invalidOrder;
    OrderWithStatus orderWithStatus;
    CancellationTokenSource cancellationToken;

    protected async override Task OnParametersSetAsync()
    {
        cancellationToken?.Cancel();
        await PollForUpdates();
    }

    private async Task PollForUpdates()
    {
        cancellationToken = new CancellationTokenSource();
        while (!cancellationToken.IsCancellationRequested)
        {
            try
            {
                invalidOrder = false;
                orderWithStatus = await HttpClient.GetJsonAsync<OrderWithStatus>($"/orders/{OrderId}");
                if (orderWithStatus == null || orderWithStatus.StatusText == "Delivered")
                {
                    // no need to refresh after order is delivered. or if is empty order
                    Console.WriteLine("Null hit");
                    cancellationToken.Cancel();
                }
            }
            catch (Exception)
            {
                Console.WriteLine("Exception hit");

                invalidOrder = true;
                cancellationToken.Cancel();
            }

            StateHasChanged();
            await Task.Delay(4000);
        }




    }
    void IDisposable.Dispose()
    {
        cancellationToken?.Cancel();
    }
}